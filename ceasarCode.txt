*This is the terminal*

Usage: ./caesar key
caesar/ $ ./caesar 2 2 2
Usage: ./caesar key
caesar/ $ ./caesar 2a
Usage: ./caesar key
caesar/ $ ./caesar 2
plaintext:  Hello ABA!! 123.
ciphertext: Jgnnq CDC!! 123.

*This is the code*

#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

bool isOnlyDigits(string contender);
string rotate(string text, int key);

int main(int argc, string argv[])
{
    string contender = argv[1];
    //check if arg is a single string
    if (argc != 2)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
    //check if the string is only numbers
    if (isOnlyDigits(contender) == false)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }

    int key = atoi(contender);
    string text = get_string("plaintext:  ");
    string cipher = rotate(text, key);
    printf("ciphertext: %s\n", cipher);
    return 0;
}

bool isOnlyDigits(string contender)
{
    for (int i = 0, j = strlen(contender); i < j; i++)
    {
        if (contender[i] < 48 || contender[i] > 57)
        {
            return false;
        }
    }
    return true;
}

string rotate(string text, int key)
{
    string cipher = text;
    for (int i = 0, j = strlen(text); i < j; i++)
    {
        //A=65, Z=90, a=97, z=122
        //if the char is not a letter the function wont change it
        if ((text[i] < 97 || text[i] > 122) && (text[i] < 65 || text[i] > 90))
        {
            cipher[i] = text[i];
        }
        else
        {
            //if its a lowercase it'll be converted to uppercase
            bool upper = false;
            if (text[i] >= 97 && text[i] <= 122)
            {
                text[i] = toupper(text[i]);
                upper = true;
            }
            //make the key to be 0-26 range
            key = key % 26;
            //adding the value of key
            text[i] += key;
            //if the letter passed "z" then it goes back to "a"
            if ((text[i]) > 90)
            {
                text[i] -= 26;
            }
            //if letter was originally lowercase it'll be converted back
            if (upper)
            {
                text[i] = tolower(text[i]);
                upper = false;
            }
            //string cipher being adjusted according to changes
            cipher[i] = text[i];
        }
    }
    return cipher;
}
